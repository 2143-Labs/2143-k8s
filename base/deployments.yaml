apiVersion: apps/v1
kind: Deployment
metadata:
  name: john2143-com
spec:
  replicas: 1
  selector:
    matchLabels:
      app: john2143-com
  template:
    metadata:
      labels:
        app: john2143-com
        servicegroup: "mine"
    spec:
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: files-pvc
      - name: upload-fish
        configMap:
          name: upload-fish
          defaultMode: 0777
          items:
            - key: upload.fish
              path: upload.fish
            - key: prune.fish
              path: prune.fish
            - key: shared.fish
              path: shared.fish

      #securityContext:
        #runAsUser: 1000
        #runAsGroup: 1000
        #fsGroup: 1000

      containers:
      - name: john2143-com
        image: imagehost:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: &port 3000
        volumeMounts:
        - mountPath: /app/juushFiles
          name: data-volume
        env:
        - name: S3_ENDPOINT_URL
          valueFrom:
            secretKeyRef:
              name: s3-creds
              key: S3_ENDPOINT_URL
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3-creds
              key: S3_ACCESS_KEY
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: s3-creds
              key: S3_SECRET_KEY
        - name: MINIO_ENDPOINT_URL
          valueFrom:
            secretKeyRef:
              name: minio-creds
              key: S3_ENDPOINT_URL
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-creds
              key: S3_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-creds
              key: S3_SECRET_KEY

        - name: BUCKET
          value: imagehost-files
        - name: FOLDER
          value: public-prod
        - name: DB
          value: mongodb://admin:pass@mongo
        - name: PORT
          value: "3000"
        - name: IP
          value: "0.0.0.0"
        - name: NODE_ENV
          value: production

        resources:
          requests:
            memory: "100Mi"
            cpu: "10m"
          limits:
            memory: "200Mi"
            cpu: "1000m"

        livenessProbe:
          httpGet:
            path: /health
            port: *port
          initialDelaySeconds: 1
          periodSeconds: 1
          failureThreshold: 25

        readinessProbe:
          httpGet:
            path: /health
            port: *port
          initialDelaySeconds: 1
          periodSeconds: 5
          failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: john2143-com
spec:
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: john2143-com
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
        servicegroup: "mine"
    spec:
      volumes:
      - name: mongodata
        #emptyDir:
          #sizeLimit: 50Mi
        persistentVolumeClaim:
          claimName: mongo-pvc

      containers:
      - name: mongo
        image: mongo
        ports:
        - containerPort: 27017

        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: admin
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: pass

        volumeMounts:
          - mountPath: /data/db
            name: mongodata

        resources:
          requests:
            memory: "330Mi"
            cpu: "50m"
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: http
  selector:
    app: mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openfront-pro
spec:
  replicas: 1
  selector:
    matchLabels:
      app: openfront-pro
  template:
    metadata:
      labels:
        app: openfront-pro
        servicegroup: "mine"
    spec:
      containers:
      - name: openfront-pro
        image: openfrontpro:latest
        imagePullPolicy: Always
        ports:
        - containerPort: &port 3000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: openfront-pro-db
              key: DATABASE_URL
        - name: PORT
          value: "3000"
        - name: USERAGENT
          value: "openfront-pro-crawler"
          #valueFrom:
            #secretKeyRef:
              #name: openfront-pro-creds
              #key: USERAGENT
        #- name: COOKIE
          #valueFrom:
            #secretKeyRef:
              #name: openfront-pro-creds
              #key: COOKIE
        - name: OPENFRONT_LOBBY_URL
          value: https://blue.openfront.io/api/public_lobbies

        resources:
          requests:
            memory: "100Mi"
            cpu: "10m"
          limits:
            memory: "200Mi"
            cpu: "1000m"

        livenessProbe:
          httpGet:
            path: /
            port: *port
          initialDelaySeconds: 1
          periodSeconds: 1
          failureThreshold: 25

        readinessProbe:
          httpGet:
            path: /
            port: *port
          initialDelaySeconds: 1
          periodSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: openfront-pro
spec:
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: openfront-pro
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-ofp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-ofp
  template:
    metadata:
      labels:
        app: postgres-ofp
        servicegroup: "mine"
    spec:
      volumes:
      - name: postgres-ofpdata
        #emptyDir:
          #sizeLimit: 50Mi
        persistentVolumeClaim:
          claimName: postgres-ofp-pvc

      containers:
      - name: postgres-ofp
        image: postgres:latest
        ports:
        - containerPort: 5432

        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: openfront-pro-db
              key: POSTGRES_PASSWORD
        # Initial DB: openfrontpro
        - name: POSTGRES_DB
          value: openfrontpro

        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-ofpdata
          subPath: ofp-data/

        #resources:
          #requests:
            #memory: "330Mi"
            #cpu: "50m"
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-ofp
spec:
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: http
  selector:
    app: postgres-ofp
